name: Build Deploy Package Umbraco V8

on:
  workflow_call:
    inputs:
      front-end-directory:
        required: true
        type: string
      cd-path:
        required: false
        type: string
      vue-directory:
        required: false
        type: string
      cd-path-vue:
        required: false
        type: string
      organization-name:
        required: true
        type: string
      project-name:
        required: true
        type: string
      build-configuration:
        required: true
        default: 'release'
        type: string
      csproj-path:
        required: true
        type: string
        
### Some environment variables to ease use and keep oversight 
env:
  app-path: ${{ github.workspace }}\Axendo.Umb.${{ inputs.organization-name }}.${{ inputs.project-name }}.Web
  assets-path: ${{ github.workspace }}\Axendo.Umb.${{ inputs.organization-name }}.${{ inputs.project-name }}.Web\assets
  vue-path: ${{ github.workspace }}\Axendo.Umb.${{ inputs.organization-name }}.${{ inputs.project-name }}.Web\vue-apps

jobs:
  Checkout-source:
    name: Checkout source code
    runs-on: self-hosted
    steps:
    - name: git configure long path
      run: git config --global core.longpaths true
    - uses: actions/checkout@v3
      with: 
        fetch-depth: 0 #fetch-depth 0 indicates fetching all history, this is needed for frontend en vue caching

  Get-Frontend-Hash:
    if: ${{ inputs.frontend-directory }}
    name: FRONTEND Hash
    needs: Checkout-source
    runs-on: self-hosted
    outputs:
      hash: ${{ steps.FRONTEND_HASH.outputs.hash }}
    steps:
      - id: FRONTEND_HASH
        run: echo "::set-output name=hash::$(git log -1 --pretty=format:'%h' --follow '${{ inputs.frontend-directory }}')"

  Build-frontend:
    if: ${{ inputs.frontend-directory }}
    name: Build Frontend
    needs: Get-Frontend-Hash
    runs-on: self-hosted
    steps:
      ### First make sure the directory assets exists, this is needed or cache action will throw an error
      - name: Create Directory.
        run: New-Item -Path "${{ env.app-path }}" -Name "assets" -ItemType "directory" -Force
      ### Check cache action for existing frontend build
      - name: Cache Frontend Build
        id: CACHE_FRONTEND
        uses: actions/cache@v3
        with:
          path: ${{ env.assets-path }}
          key: frontend-cache-${{needs.Get-Frontend-Hash.outputs.hash}}
      ### below if will make sure this only runs when the frontend needs to be build 
      - if: steps.CACHE_FRONTEND.outputs.cache-hit != 'true'
        name: build the frontend
        uses: AxendoNL/build-frontend-action@umbraco-v8
        with:
          frontend-directory: ${{ inputs.frontend-directory }}
          cd-path: ${{ inputs.cd-path }}
  
  Get-Vue-Hash:
    if: ${{ inputs.vue-directory }}
    name: VUE Hash
    needs: Build-frontend
    runs-on: self-hosted
    outputs:
      hash: ${{ steps.VUE_HASH.outputs.hash }}
    steps:
      - id: VUE_HASH
        run: echo "::set-output name=hash::$(git log -1 --pretty=format:'%h' --follow '${{ inputs.vue-directory }}')"
  
  Build-vue:
    if:  ${{ inputs.vue-directory }}
    name: Build Vue
    needs: Get-Vue-Hash         
    runs-on: self-hosted
    steps:
      ### First make sure the directory vue-apps exists, this is needed or cache action will throw an error
      - name: Create Directory.
        run: New-Item -Path "${{ env.app-path }}" -Name "vue-apps" -ItemType "directory" -Force
      ### Check cache action for existing vue build
      - name: Cache Vue Build
        id: CACHE_VUE
        uses: actions/cache@v3
        with:
          path: ${{ env.vue-path }}
          key: vue-cache-${{needs.Get-Vue-Hash.outputs.hash}}
      ### below if will make sure this only runs when the vue apps need to be build 
      - if: steps.CACHE_VUE.outputs.cache-hit != 'true'
        name: Build vue apps
        uses: AxendoNL/build-vue-action@umbraco-v8
        with:
          vue-directory: ${{ inputs.vue-directory }}
          cd-path-vue: ${{ inputs.cd-path-vue }}

  Build-NET:
    name: Build & Publish .NET
    needs: Build-frontend
    runs-on: self-hosted
    steps:
      - name: Setup .NET
        uses: AxendoNL/dotnet-package-action@umbraco-v8
        with:
          organization-name: ${{ inputs.organization-name }}
          project-name: ${{ inputs.project-name }}
          build-configuration: ${{ inputs.build-configuration }}
          csproj-path: ${{ inputs.csproj-path }}
      ### Remove files from artifact if build success
      - name: Cleanup root
        run: |
          Get-ChildItem -Path ${{ github.workspace }}\Archive\${{ inputs.organization-name }}\${{ inputs.project-name }}\${{ github.ref_name }}\* -Include ('*.json', '*.pbd', '*.config') -Exclude '*.deps.json', '*.runtimeconfig.*' | Remove-Item -Verbose
          Get-ChildItem -Path ${{ github.workspace }}\Archive\${{ inputs.organization-name }}\${{ inputs.project-name }}\${{ github.ref_name }}\wwwroot -Include ('*.config') -Recurse | Remove-Item -Verbose
      ### Create zipped artifact if build success
      - name: Create archive
        run: Compress-Archive -Path ${{ github.workspace }}\Archive\${{ inputs.organization-name }}\${{ inputs.project-name }}\${{ github.ref_name }} -DestinationPath ${{ github.workspace }}\Archive\${{ inputs.organization-name }}\${{ inputs.project-name }}\${{ github.ref_name }}\Archive.zip
      ### Upload zipped artifact if build success
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.organization-name }}-${{ inputs.project-name }}-${{ github.sha }}
          path: "${{ github.workspace }}/Archive/${{ inputs.organization-name }}/${{ inputs.project-name }}/${{ github.ref_name }}/Archive.zip"
      ### Cleanup
      - name: Remove Config and Json files
        run: Remove-Item '${{ github.workspace }}\Archive' -Recurse 